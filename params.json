{"name":"Superglue","tagline":"SuperGlue -- A C++ Header-Only Template Library for Data-Dependency Driven Task Parallelism","body":"### WHAT IS THIS?\r\n\r\nSuperGlue is a C++ library for task-parallelism, with data-dependent tasks.\r\n\r\nThe programmer specifies tasks, and which data each task reads and writes,\r\nand SuperGlue uses this information to deduce dependencies.\r\n\r\n\r\n### SHOW ME THE CODE!\r\n```\r\n#include \"superglue.hpp\"\r\n#include <iostream>\r\n\r\n// Settings for SuperGlue. Here we use the defaults.\r\nstruct Options : public DefaultOptions<Options> {};\r\n\r\n// Define a task, with no dependencies.\r\nstruct MyTask : public Task<Options> {\r\n    void run() {\r\n        std::cout << \"Hello world!\" << std::endl;\r\n    }\r\n};\r\n\r\nint main() {\r\n    // The ThreadManager object starts the run-time system and starts\r\n    // as many worker threads as there are cores.\r\n    ThreadManager<Options> tm;\r\n\r\n    // Create a task and submit it to SuperGlue\r\n    tm.submit(new MyTask());\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nCheck the \"examples/\" directory for more examples. The above example is found\r\nin \"examples/helloworld/\". For an example with task dependencies, look at\r\n\"examples/dependencies/\".\r\n\r\n\r\n### COMPILING AND INSTALLING\r\n\r\nSuperGlue is a header-only template library. As such, it is not compiled as\r\nits own unit, but included into and compiled together with other code. The only\r\nsetup that is needed is to add the \"superglue/\" directory to the include paths\r\nof the compiler, and enable pthreads support (compile with the -pthread flag).\r\n\r\n\r\n### GETTING STARTED\r\n\r\nRunning \"make\" will compile and run a few unit tests.\r\nRunning \"make examples\" will compile all examples in the \"examples/\" directory.\r\nThe \"examples_dep/\" directory contains examples with external dependencies.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}